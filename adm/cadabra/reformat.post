# post-process the foo.ad file
#-----------------------------------
s%pow\((x[0-9]+), *2\)%(\1*\1)%g# catch pow(x123,2) inside other pow(...)
s%pow\(([xyz]{1}), *([23456789]{1})\)%((\1) ** (~\2))%g# catch pow(x,n) inside other pow(...)
s%pow\(([^,]+), (-?)([0-9]+)\)%((\1) ** (\2~\3))%g# use a tilde to protect pure integers, removed later
s%([^\.a-z0-9_~])([0-9]+.?0?e-?)([0-9]+)([^\.a-z0-9_~])%\1\2~\3\4%g# protect the exponent
s%([^\.a-z0-9_~])([0-9]+.?0?e-?)([0-9]+)([^\.a-z0-9_~])%\1\2~\3\4%g# protect the exponent
s%([^\.a-z0-9_~])([0-9]+)([^\.a-z0-9_~])%\1\2.0\3%g# two rounds to cover overlapping matches
s%([^\.a-z0-9_~])([0-9]+)([^\.a-z0-9_~])%\1\2.0\3%g# sed does not recognise \d so must use 0-9
s%~%%g# kill the tilde
#-----------------------------------
s%/+%/%g# replace multiple /'s with a single / this cleans up file names in the header of the generated files
#-----------------------------------
# the only tensors the following would be applied to are symmetric
# so use a compact notation
s%\(x, x\)%(xx)%g
s%\(x, y\)%(xy)%g
s%\(x, z\)%(xz)%g
s%\(y, x\)%(xy)%g
s%\(y, y\)%(yy)%g
s%\(y, z\)%(yz)%g
s%\(z, x\)%(xz)%g
s%\(z, y\)%(yz)%g
s%\(z, z\)%(zz)%g
#-----------------------------------
s%\(x, x, x\)%(1)(xx)%g
s%\(x, y, x\)%(1)(xy)%g
s%\(x, z, x\)%(1)(xz)%g
s%\(y, x, x\)%(1)(xy)%g
s%\(y, y, x\)%(1)(yy)%g
s%\(y, z, x\)%(1)(yz)%g
s%\(z, x, x\)%(1)(xz)%g
s%\(z, y, x\)%(1)(yz)%g
s%\(z, z, x\)%(1)(zz)%g
#-----------------------------------
s%\(x, x, y\)%(2)(xx)%g
s%\(x, y, y\)%(2)(xy)%g
s%\(x, z, y\)%(2)(xz)%g
s%\(y, x, y\)%(2)(xy)%g
s%\(y, y, y\)%(2)(yy)%g
s%\(y, z, y\)%(2)(yz)%g
s%\(z, x, y\)%(2)(xz)%g
s%\(z, y, y\)%(2)(yz)%g
s%\(z, z, y\)%(2)(zz)%g
#-----------------------------------
s%\(x, x, z\)%(3)(xx)%g
s%\(x, y, z\)%(3)(xy)%g
s%\(x, z, z\)%(3)(xz)%g
s%\(y, x, z\)%(3)(xy)%g
s%\(y, y, z\)%(3)(yy)%g
s%\(y, z, z\)%(3)(yz)%g
s%\(z, x, z\)%(3)(xz)%g
s%\(z, y, z\)%(3)(yz)%g
s%\(z, z, z\)%(3)(zz)%g
#-----------------------------------
s%\(x\)%(1)%g
s%\(y\)%(2)%g
s%\(z\)%(3)%g
#-----------------------------------
