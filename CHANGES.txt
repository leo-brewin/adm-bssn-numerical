-- 01 apr 2025

   I've made many many chages to the workflow. I've also added in more choices
   for parallel processing on the evolution code.

   1. All Ada codes are now compiled using gprbuild.
   2. The Makefile's exist only to coordinate the workflow and for basic housekeeping.
   3. Now uses 'alr' to manage the Ada toolchain. The compile scripts will download the
      Ada toolchain if it finds 'alr' but not 'gprbuild'.
   4. The install process was changed to keep all tools (except Cadabra and gprbuild)
      within the main directory.

-- 05 jun 2024

   1. Added the simple program numcpu.adb to report the number of CPUs.
   2. Updated the Makefile's to suit.

-- 02 jun 2024

   I made some extensive changes to the tools that convert the c-code created
   by Cadabra to Ada fragments. There were no changes to the udnerlying
   mathematics -- each change was to improve the structure of the code.

   1. Rewrote utilities/cdb2ada.adb code.

   2. Deleted utilities/ada-merge.adb and utilities/ada-split.adb
      The code now uses the updated version of hybrid-latex/scripts/merge-src.py
      to do the job previously done by ada-merge. The ada-split code was never used.

   3. Added and modified various Makefile's to allow the Ada sources to be
      compiled without using gprbuild. See, for example, adm/code/src/Makefile

   4. Rewrote support-cmdline.adb. This now allows both short and long command
      line flags (e.g., -t 1.234 and --time 1.234). However, this code only
      uses short flags.

   5. Added the UNINSTALL.sh script.

-- 09 aug 2022

   1. Updated Cadabra codes to suit the new Cadabra syntax (as of 5 Aug 2022).
      Cadabra now uses the "join" function to add lists. Previousy it used
      the "+" operator.

   2. Small changes to support macOS Silicon.
      The arm64 chips on macOS Silicon support a maximum of 15 decimal digits.
      In contrast, the Intel x86_64 chips allow up to 18 decimal digits.

-- 21 nov 2021

   1. Updated python/writecode.py to suit changes introduced in symp 1.7.
      Between Sympy 1.1 and Sympy 1.7 the modules C99CodePrinter and Assignment have
      been relocated. This forced changes to the import statements for each module.

   2. Corrected a bug in the code C-code generation in the ADM and BSSN numerical codes.
      This is a silly bug on my part (and I'm not sure why I didn't see it sooner). The
      code generators used a shared library, shared.py, that is generated from
      shared.cdb. My mistake was to leave both files in the same directory. This caused
      Cadabra to ignore the shared.py file and read shared.cdb. For some reason (a
      Cadabra issue, not mine) the information in shared.cdb was not visible to the
      other modules. Hence Cadabra reported that certain objects were not defined. I
      fixed this problem by moving shared.cdb into a private directory hide/. The
      shared.py file remains outside of hide/.

   3. Non-trivial refactoring of the build/install scripts.
      This was both to tidy the file structure as well as to simplify the installation
      process. The default install is now as simple as "source SETPATHS; make install".
      Almost all install/build/test/clean actions are now controlled by Makefiles.

   4. Updated cdbpreproc.py.
      The Cadabra preprocessor will strip any in-line comments (such as cdb tags) from
      what it thinks are short lines. This failed for some of the examples (some in line
      comments were not deleted). This was fixed by changing how long a short line should be,
      from 100 to 200. If the line is longer than 200 characters it is deemed to be a long line
      even if the comment begins well before the 200 character limit.

   5. Replaced merge-tex.py with merge-src.py.
      5.1 The new code preserves the indentation level for each included file.
          This is essential for Python and Cadabra sources.
      5.2 Expanded the syntax for Input statements.
          Can now include a file using any of
             \Input{file}
             $Input{file}
             @Input{file}

   6. Updated ada-merge.adb and ada-split.adb
      The file ada-merge.adb is an Ada version of the Python script merge-src.py.
      They do the same job. The file ada-split.adb is not used here. Its job is
      to split a previously merged set of sources.
