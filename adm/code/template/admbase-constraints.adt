package body ADMBase.Constraints is

   dxdx, dydy, dzdz : Real;
   two_dx, two_dy, two_dz : Real;
   four_dxdy, four_dxdz, four_dydz : Real;

   procedure set_constraints (point : GridPoint) is

      {$include "include/local-data.ad"}

      {$include "cadabra/ricci.ad"}

      {$include "cadabra/hamiltonian.ad"}
      {$include "cadabra/momentum.ad"}

      procedure set_data is
         i, j, k : Integer;
         x, y, z : Real;
      begin

         i := point.i;
         j := point.j;
         k := point.k;

         x := point.x;
         y := point.y;
         z := point.z;

         gab := ADMBase.gab (i,j,k);   -- 3-metric
         Kab := ADMBase.Kab (i,j,k);   -- extrinsic curvature

         iab := symm_inverse (gab);    -- 3-metric inverse

         -- second order centred finite differences for the 3-metric

         declare
            gab : MetricGridArray renames ADMBase.gab;
         begin

            d1gab (1) := (gab (i+1,j,k) - gab (i-1,j,k)) / (two_dx);
            d1gab (2) := (gab (i,j+1,k) - gab (i,j-1,k)) / (two_dy);
            d1gab (3) := (gab (i,j,k+1) - gab (i,j,k-1)) / (two_dz);

            d2gab (xx) := (gab (i+1,j,k) - 2.0*gab (i,j,k) + gab (i-1,j,k)) / (dxdx);
            d2gab (yy) := (gab (i,j+1,k) - 2.0*gab (i,j,k) + gab (i,j-1,k)) / (dydy);
            d2gab (zz) := (gab (i,j,k+1) - 2.0*gab (i,j,k) + gab (i,j,k-1)) / (dzdz);

            d2gab (xy) := (gab (i+1,j+1,k) + gab (i-1,j-1,k) - gab (i+1,j-1,k) - gab (i-1,j+1,k)) / (four_dxdy);
            d2gab (xz) := (gab (i+1,j,k+1) + gab (i-1,j,k-1) - gab (i+1,j,k-1) - gab (i-1,j,k+1)) / (four_dxdz);
            d2gab (yz) := (gab (i,j+1,k+1) + gab (i,j-1,k-1) - gab (i,j+1,k-1) - gab (i,j-1,k+1)) / (four_dydz);

         end;

         -- second order centred finite differences for the extrinsic curvatures

         declare
            Kab : ExtcurvGridArray renames ADMBase.Kab;
         begin

            d1Kab (1) := (Kab (i+1,j,k) - Kab (i-1,j,k)) / (two_dx);
            d1Kab (2) := (Kab (i,j+1,k) - Kab (i,j-1,k)) / (two_dy);
            d1Kab (3) := (Kab (i,j,k+1) - Kab (i,j,k-1)) / (two_dz);

         end;

         d1iab (1) := - symm_raise_indices (d1gab (1), iab);
         d1iab (2) := - symm_raise_indices (d1gab (2), iab);
         d1iab (3) := - symm_raise_indices (d1gab (3), iab);

         set_3d_ricci;

         R := ixx*Rxx + iyy*Ryy + izz*Rzz + 2.0*( ixy*Rxy + ixz*Rxz + iyz*Ryz );

      end set_data;

   begin

      set_data;

      set_hamiltonian;
      set_momentum;

      declare
         i, j, k : Integer;
      begin

         i := point.i;
         j := point.j;
         k := point.k;

         ADMBase.Ham (i,j,k) := Ham;
         ADMBase.Mom (i,j,k) := Mom;

      end;

   end set_constraints;

   procedure set_finite_diff_factors is
   begin

      dxdx := dx * dx;
      dydy := dy * dy;
      dzdz := dz * dz;

      two_dx := 2.0 * dx;
      two_dy := 2.0 * dy;
      two_dz := 2.0 * dz;

      four_dxdy := 4.0 * dx * dy;
      four_dxdz := 4.0 * dx * dz;
      four_dydz := 4.0 * dy * dz;

   end set_finite_diff_factors;

   procedure set_constraints_intr is

      b : Integer;

   begin

      for a in 1 .. interior_num loop

         b := interior (a);

         set_constraints (grid_point_list(b));

      end loop;

   end set_constraints_intr;

   procedure set_constraints_bndry_ns is

      b, i, j, k : Integer;

   begin

      -- apply periodic boundary conditions

      -- north/south boundaries

      for a in 1 .. north_bndry_num loop

         b := north_bndry (a);

         i := grid_point_list (b).i;
         j := grid_point_list (b).j;
         k := grid_point_list (b).k;  -- equals num_z

         Ham (i,j,k) := Ham (i,j,2);
         Mom (i,j,k) := Mom (i,j,2);

      end loop;

      for a in 1 .. south_bndry_num loop

         b := south_bndry (a);

         i := grid_point_list (b).i;
         j := grid_point_list (b).j;
         k := grid_point_list (b).k;  -- equals 1

         Ham (i,j,k) := Ham (i,j,num_z-1);
         Mom (i,j,k) := Mom (i,j,num_z-1);

      end loop;

   end set_constraints_bndry_ns;

   procedure set_constraints_bndry_ew is

      b, i, j, k : Integer;

   begin

      -- apply periodic boundary conditions

      -- east/west boundaries

      for a in 1 .. east_bndry_num loop

         b := east_bndry (a);

         i := grid_point_list (b).i;
         j := grid_point_list (b).j;  -- equals num_y
         k := grid_point_list (b).k;

         Ham (i,j,k) := Ham (i,2,k);
         Mom (i,j,k) := Mom (i,2,k);

      end loop;

      for a in 1 .. west_bndry_num loop

         b := west_bndry (a);

         i := grid_point_list (b).i;
         j := grid_point_list (b).j;  -- equals 1
         k := grid_point_list (b).k;

         Ham (i,j,k) := Ham (i,num_y-1,k);
         Mom (i,j,k) := Mom (i,num_y-1,k);

      end loop;

   end set_constraints_bndry_ew;

   procedure set_constraints_bndry_fb is

      b, i, j, k : Integer;

   begin

      -- apply periodic boundary conditions

      -- front/back boundaries

      for a in 1 .. front_bndry_num loop

         b := front_bndry (a);

         i := grid_point_list (b).i;  -- equals num_x
         j := grid_point_list (b).j;
         k := grid_point_list (b).k;

         Ham (i,j,k) := Ham (2,j,k);
         Mom (i,j,k) := Mom (2,j,k);

      end loop;

      for a in 1 .. back_bndry_num loop

         b := back_bndry (a);

         i := grid_point_list (b).i;  -- equals 1
         j := grid_point_list (b).j;
         k := grid_point_list (b).k;

         Ham (i,j,k) := Ham (num_x-1,j,k);
         Mom (i,j,k) := Mom (num_x-1,j,k);

      end loop;

   end set_constraints_bndry_fb;

   procedure set_constraints is
   begin

      set_finite_diff_factors;

      set_constraints_intr;
      set_constraints_bndry_fb;
      set_constraints_bndry_ew;
      set_constraints_bndry_ns;

   end set_constraints;

end ADMBase.Constraints;
